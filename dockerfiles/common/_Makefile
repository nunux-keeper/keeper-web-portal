.SILENT :
.PHONY : help network volume mount update build clean cleanup start stop rm shell logs push pull tag

# Docker configuration regarding the system architecture
DOCKER=docker
DOCKERFILE=Dockerfile
BASEIMAGE?=debian:jessie
VOLUME_IMAGE=busybox
UNAME_M := $(shell uname -m)
ifeq ($(UNAME_M),armv7l)
	DOCKERFILE=Dockerfile.arm
	APPNAME=$(APPNAME)-arm
	ARM_BASEIMAGE?=armhfbuild/$(BASEIMAGE)
	VOLUME_IMAGE=armbuild/busybox
endif

NETWORK?=keeper-vlan

# Get IP of the running container
IP:=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(APPNAME)`

# Default registry
REGISTRY?=

# Default version
VERSION?=latest

# Default username
USERNAME?=ncarlier

# Default image name
IMAGE?=$(REGISTRY)$(USERNAME)/$(APPNAME):$(VERSION)

# Custom flags
RUN_CUSTOM_FLAGS?=
# Default Docker run flags
RUN_FLAGS?=-d -h $(APPNAME) --name $(APPNAME) --net=$(NETWORK) $(RUN_CUSTOM_FLAGS)
# Default Docker run command
RUN_CMD?=

# Custom flags
SHELL_CUSTOM_FLAGS?=$(RUN_CUSTOM_FLAGS)
# Default Docker run flags for shell access
SHELL_FLAGS?=--rm -it -h $(APPNAME) --name $(APPNAME) --entrypoint="/bin/ash" $(SHELL_CUSTOM_FLAGS)
# Default Docker run command for shell access
SHELL_CMD?=-c /bin/ash

# Volume base directory on the host
VOLUME_HOST_PATH?=$(PWD)
# Volume base directory into the container
VOLUME_CONTAINER_PATH?=/usr/src/app
# Volume flags
VOLUME_FLAGS:=

# Default action
all: help

## This help screen
help:
	printf "Available targets:\n\n"
	awk '/^[a-zA-Z\-\_0-9]+:/ { \
		helpMessage = match(lastLine, /^## (.*)/); \
		if (helpMessage) { \
			helpCommand = substr($$1, 0, index($$1, ":")); \
			helpMessage = substr(lastLine, RSTART + 3, RLENGTH); \
			printf "%-15s %s\n", helpCommand, helpMessage; \
		} \
	} \
	{ lastLine = $$0 }' $(MAKEFILE_LIST)

Dockerfile.arm:
ifeq ($(UNAME_M),armv7l)
	echo "Building $(APPNAME) ARM dockerfile..."
	sed -e 's|$(BASEIMAGE)|$(ARM_BASEIMAGE)|' Dockerfile > Dockerfile.arm
endif

## Build the network
network:
	echo "Building network: $(NETWORK)..."
	$(DOCKER) network create $(NETWORK)

## Build the volume image
volume:
	echo "Building volumes: $(VOLUME_HOST_BASE)/$(APPNAME) -> $(VOLUME_CONTAINER_BASE)/$(APPNAME) ..."
	$(DOCKER) run -v $(VOLUME_HOST_PATH):$(VOLUME_CONTAINER_PATH) --name $(APPNAME)_volumes $(VOLUME_IMAGE) true

## Mount volume
mount:
	$(eval VOLUME_FLAGS += --volumes-from $(APPNAME)_volumes)
	echo "Using volumes from $(APPNAME)_volumes"

## Update base image
update:
	echo "Updating base image..."
	-$(DOCKER) pull $(BASEIMAGE)

## Build the image
build: update Dockerfile.arm
	echo "Building $(IMAGE) docker image..."
	$(DOCKER) build --rm -t $(IMAGE) -f $(DOCKERFILE) .
	$(MAKE) cleanup

## Remove the image (also stop and delete the container)
clean: stop rm
	echo "Removing $(IMAGE) docker image..."
	-$(DOCKER) rmi $(IMAGE)

## Remove dangling images
cleanup:
	echo "Removing dangling docker images..."
	-$(DOCKER) images -q --filter 'dangling=true' | xargs $(DOCKER) rmi

## Start the container
start:
	echo "Starting $(IMAGE) docker image..."
	$(DOCKER) run $(RUN_FLAGS) $(VOLUME_FLAGS) $(IMAGE) $(RUN_CMD)

## Stop the container
stop:
	echo "Stopping container $(APPNAME) ..."
	-$(DOCKER) stop $(APPNAME)

## Delete the container
rm:
	echo "Deleting container $(APPNAME) ..."
	-$(DOCKER) rm $(APPNAME)

## Run the container with shell access
shell:
	echo "Running $(IMAGE) docker image with shell access..."
	$(DOCKER) run $(SHELL_FLAGS) $(VOLUME_FLAGS) $(IMAGE) $(SHELL_CMD)

## Show container logs
logs:
	echo "Logs of the $(APPNAME) container..."
	$(DOCKER) logs -f $(APPNAME)

## Push docker image to the registry
push:
	echo "Pushing $(IMAGE) ..."
	$(DOCKER) push $(IMAGE)

## Pull docker image from the registry
pull:
	echo "Pulling $(IMAGE) ..."
	$(DOCKER) pull $(IMAGE)

## Tag docker image
tag:
	echo "Tagging $(IMAGE) as latest ..."
	$(DOCKER) tag $(IMAGE) $(REGISTRY)$(USERNAME)/$(APPNAME):latest

